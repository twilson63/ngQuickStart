{"name":"ng-quickstart","tagline":"A QuickStart AngularJS tutorial, it only covers the basics, but should help you get started.","body":"# ngQuickstart \r\n\r\n## Setup\r\n\r\n* Install brackets (http://brackets.io/)\r\n* Install Emmet Extension (https://github.com/emmetio/emmet/downloads)\r\n* Install Nodejs (http://nodejs.org)\r\n* Open console\r\n\r\n``` sh\r\nmkdir tsearch\r\ncd tsearch\r\nnpm install bower -g\r\nbower init\r\nbower install jquery bootstrap.css angular-resource --save\r\ntouch index.html\r\n```\r\n\r\n* Open Brackets or your favorite editor\r\n* Open the index.html file and paste the snippet below\r\n\r\n``` html\r\n<!doctype html>\r\n<html>\r\n<head>\r\n  <title>Twitter Search</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap/css/bootstrap.css\">\r\n</head>\r\n<body>\r\n  <div class=\"container\">\r\n    <h1>Twitter Search</h1>\r\n    <input type=\"text\">\r\n    <button class=\"btn\">search</button>\r\n    <ul>\r\n      <li></li>\r\n    </ul>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/angular-resource/angular-resource.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\nor\r\n\r\n``` html\r\n<!doctype html>\r\nhtml>head>title{Twitter Search}+link[href=\"/components/bootstrap/css/bootstrap.css\"]^body>.container>h1{Twitter Search}+input+button.btn{search}+ul>li^^script[src=\"/components/jquery/jquery.js\"]+script[src=\"/components/angular/angular.js\"]+script[src=\"/components/angular-resource/angular-resource.js\"]\r\n```\r\n\r\n* And press tab to invoke emmet\r\n\r\n## Exercise 1 - Simple Binding Test\r\n\r\nIn this exercise, we want to do a simple binding test to confirm we have angularjs configured correctly.\r\n\r\nIn the body of your html document, add the following html after the `<button>` tag:\r\n  \r\n``` html\r\n<h3>Results for: <span ng-bind=\"query\"></span></h3>\r\n```\r\n\r\nNext, lets add an angular `ng-model` attribute to the `input` element and assign the string \"query\", like this:\r\n\r\n``` html\r\n<input type=\"text\" ng-model=\"query\">\r\n```\r\n\r\nLastly, we need to bootstrap our angularjs app, lets use the manual method.\r\n\r\nTo manually bootstrap an AngularJS app we need to create a `<script>` element after the last script element, \r\nor just before the `</body>` element.\r\n\r\n``` html\r\n<script>\r\n  angular.element(document).ready(function() {\r\n    angular.bootstrap(document);\r\n  });\r\n</script>\r\n```\r\n\r\nHere is a full view of your html file.\r\n\r\n``` html\r\n<!doctype html>\r\n<html>\r\n<head>\r\n  <title>Twitter Search</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap/css/bootstrap.css\">\r\n</head>\r\n<body>\r\n  <div class=\"container\">\r\n    <h1>Twitter Search</h1>\r\n    <input type=\"text\" ng-model=\"query\">\r\n    <button class=\"btn\">search</button>\r\n    <h3>Results for: <span ng-bind=\"query\"></span></h3>\r\n    <ul>\r\n      <li></li>\r\n    </ul>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/angular-resource/angular-resource.js\"></script>\r\n  <script>\r\n    angular.element(document).ready(function() {\r\n      angular.bootstrap(document);\r\n    });\r\n  </script>\r\n</body>\r\n</html>\r\n```\r\n\r\nOpen up a browser and confirm you have the data-binding working by typing in the input box.\r\n\r\nDid you get it working?  If so?  GREAT JOB!, if not look for syntax errors. \r\n\r\nYou may want to install [jshint](#jshint) and see if you have any syntax errors. \r\n\r\nThe view layer of Angular is made up of `HTML Templates` and `directives`, angular \r\nis like an html compiler, it will compile the html and execute any directives.  \r\nIn the above example, we added two directives (ng-model, ng-bind).\r\n\r\n## Exercise 2 - Working with directives\r\n\r\nAs we demonstrated above, we are using the actual html file as our dynamic template, \r\nthere is no need for haml, ejb, dust, or mustache.  \r\nAngularJS uses the html markup in a declarative way to build and render your views.  \r\nAs with all templates, we need a way to map data to the view template.  \r\n\r\nAngularJS uses attributes on the html element which are called directives.  \r\n\r\n> Actually, a directive may be an actual `element`, `class name` or `attribute`.  \r\n\r\nFor now, we will stick to attributes.\r\n\r\nIn this exercise, we will use the `ng-repeat` directive to display a list of results. \r\n\r\nOn the `<li>` element lets add an attribute called `ng-repeat` like so:\r\n\r\n``` html\r\n<li ng-repeat=\"item in [1, 2, 3, 4]\">\r\n  <span ng-bind=\"item\"></span>\r\n</li>\r\n```\r\n\r\nLets view the result in the browser:\r\n\r\n``` sh\r\nopen index.html\r\n```\r\n\r\nYou should see four line items, GREAT JOB!\r\n\r\nThe ng-repeat directive is one of the most powerful built-in directives in Angular,\r\nand we will use it in all of our exercises.\r\n\r\n# Exercise 3 - Controllers \r\n\r\ncreate a file in the tsearch directory called app.js,\r\nadd the following script element just before the `</body>` tag:\r\n\r\n``` html\r\n<script src=\"app.js\"></script>\r\n```\r\n\r\nNext, open `app.js` in your editor and add the following function to the `app.js` file:\r\n\r\n``` js\r\n(function() {\r\n  'use strict';\r\n\r\n  window.MainCtrl = function ($scope) {\r\n    $scope.items = ['one', 'two', 'three', 'four'];\r\n  };\r\n  \r\n})();\r\n```\r\n\r\nmodify the ng-repeat directive to loop through items on index.html.\r\n\r\n``` html\r\n<li ng-repeat=\"item in items\">\r\n```\r\n\r\nlastly we need to create a controller directive on the container div:\r\n\r\n``` html\r\n<div class=\"container\" ng-controller=\"MainCtrl\">\r\n```\r\n\r\nAnd reload your browser, you should see a list of items with each line spelled out.  \r\none, two, three, four\r\n\r\n> GREAT JOB!\r\n\r\nIf not compare your code to the following:\r\n\r\n``` html\r\n<!doctype html>\r\n<html>\r\n<head>\r\n  <title>Twitter Search</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap/css/bootstrap.css\">\r\n</head>\r\n<body>\r\n  <div class=\"container\" ng-controller=\"MainCtrl\">\r\n    <h1>Twitter Search</h1>\r\n    <input type=\"text\" ng-model=\"query\">\r\n    <button class=\"btn\">search</button>\r\n    <h3>Results for: <span ng-bind=\"query\"></span></h3>\r\n    <ul>\r\n      <li ng-repeat=\"item in items\">\r\n        <span ng-bind=\"item\"></span>\r\n      </li>    \r\n    </ul>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/angular-resource/angular-resource.js\"></script>\r\n  <script>\r\n    angular.element(document).ready(function() {\r\n      angular.bootstrap(document);\r\n    });\r\n  </script>\r\n  <script src=\"app.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n``` js\r\n(function() {\r\n  'use strict';\r\n\r\n  window.MainCtrl = function ($scope) {\r\n    $scope.items = ['one', 'two', 'three', 'four'];\r\n  };\r\n  \r\n})();\r\n```\r\n\r\n\r\nOk, so lets break down what we did here.  \r\n\r\nWe created a global function called `MainCtrl`, and on the argument list we added an argument called $scope.  \r\nYou may be wondering where this object is coming from and with good reason, we will get to that shortly.  \r\n\r\nContinuing on in the MainCtrl function, you see that we are assigning an array to a key on the $scope object \r\ncalled `items`.  \r\n\r\nMoving over the `index.html` file, we modified the ng-repeat directive to get its repeater source from the items key.  This is the `model` that we attached to the `$scope` object in our function.  And the last piece of the puzzle is the controller.  We modified the `div.container` with a new attribute called ng-controller and assigned it to the \"MainCtrl\" function.  The declaration basically creates and assigns a $scope object for all of the directives enclosed in this div to work with.  This is how AngularJS's views consume `model` data.  So you may start to think `MVC`.  \r\n\r\nSo back to the *magic*, when a ng-controller is created AngularJS creates a `service` or `object` called `$scope` \r\nfor the directives enclosed in the controller template.  Which is all the directives defined inside the \r\n`<div class=\"container\" ng-controller=\"MainCtrl\">`\r\n\r\nWhen we defined our function, we added the `$scope` (service or object) to our list of arguments.  \r\nThe act of adding this argument communicated to AngularJS to inject the controller's `$scope` object \r\ninto our controller function MainCtrl.  This is called: \r\n\r\n## Dependency Injection\r\n\r\nWhich basically means that you can ask the angular application \r\nto inject or place objects in your functions when you need them.  \r\nThe most common object you inject in your controllers is `$scope`.\r\n\r\nHopefully, you can get a solid sense on how we are wiring our Views (HTML Templates) to our controllers (Javascript \r\nFunctions) to our models (simple array).\r\n\r\n## Exercise 4 - Ajax Service\r\n\r\nSo we have a controller with a simple input form and button and results list.  We now need to take the text from the \r\ninput and make a request to twitter.  Twitter will send us some results back and we want to display them in our list.\r\n\r\nFirst, we need to open our `app.js` file and add a new argument in our MainCtrl function.  We want to ask angular \r\nto inject the `$http` service into our controller.  \r\n\r\n``` js\r\nwindow.MainCtrl = function ($scope, $http) {\r\n  $scope.items = ['one', 'two', 'three', 'four']\r\n};\r\n```\r\n\r\nAnd now we want to rewrite the function body to capture a search event and assign it to a function that will call \r\n`http://search.twitter.com/search.json?q=angularjs&callback=JSON_CALLBACK` and assign the results into the \r\n$scope.items variable.\r\n\r\n``` js\r\n  $scope.search = function(query) {\r\n    $http.jsonp('http://search.twitter.com/search.json?q=angularjs&callback=JSON_CALLBACK')\r\n      .success(function(data) {\r\n        $scope.items = data.results;\r\n      });\r\n  };\r\n```\r\n\r\nNow, we need to wire up the `$scope.search` function to our view (HTML Template).  \r\nAll we have to do is add a `ng-click` directive to the `button` element.\r\n\r\n``` html\r\n<button class=\"btn\" ng-click=\"search(query)\">search</button>\r\n```\r\n\r\nAnd we have to modify our `ng-bind` attribute in the `span` element enclosed in the `li` element \r\nto display the text from each tweet.\r\n\r\n``` html\r\n<span ng-bind=\"item.text\"></span>\r\n```\r\n\r\nLet's refresh our browser and click the search button, you should see some real live tweet results.\r\n\r\n> GREAT JOB!\r\n\r\nAlmost there, we still have one issue remaining.  \r\n\r\nWe need to take the user entered text in the input element and use it to request a search from twitter.  \r\nEverything is ready to go, all we need to do is modify our http url string to use basic string concatenation \r\nto include the query text.\r\n\r\n``` js\r\n$http.jsonp('http://search.twitter.com/search.json?q=' + query + '&callback=JSON_CALLBACK')\r\n```\r\n\r\n> GREAT JOB, we now have a very simple twitter search app using angularjs.\r\n\r\n# Exercise 5 - Using some sugar in the html template.\r\n\r\nSo there are a couple of directives that have some sugar to make things a little bit easier on the eyes. \r\nCertainly, you do not have to use these aliases if you do not want to, but it may save you some time.\r\n\r\nFirst, the bootstrap method:\r\n\r\n``` html\r\n<script>\r\n  angular.element(document).ready(function() {\r\n    angular.bootstrap(document);\r\n  });\r\n</script>\r\n```\r\n\r\nCan be replaced by just adding `ng-app` to the body or html element.\r\n\r\n``` html\r\n<html ng-app>\r\n```\r\n\r\nSecond, is to replace ng-bind with the {{model}} symbols.\r\n\r\n``` html\r\n<h3>Results for: <span ng-bind=\"query\"></span></h3>\r\n```\r\n\r\nCan be replaced with\r\n\r\n``` html\r\n<h3>Results for: {{query}}</h3>\r\n```\r\n\r\nand\r\n\r\n``` html\r\n <span ng-bind=\"item.text\"></span>\r\n```\r\n\r\nCan be replaced with\r\n\r\n``` html\r\n  {{item.text}}\r\n```\r\n\r\n# What we have so far\r\n\r\nindex.html\r\n\r\n``` html\r\n<!doctype html>\r\n<html ng-app>\r\n<head>\r\n  <title>Twitter Search</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap/css/bootstrap.css\">\r\n</head>\r\n<body>\r\n  <div class=\"container\" ng-controller=\"MainCtrl\">\r\n    <h1>Twitter Search</h1>\r\n    <input type=\"text\" ng-model=\"query\">\r\n    <button class=\"btn\" ng-click=\"search(query)\">search</button>\r\n    <h3>Results for: {{query}}</h3>\r\n    <ul>\r\n      <li ng-repeat=\"item in items\">{{item.text}}</li>    \r\n    </ul>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/angular-resource/angular-resource.js\"></script>\r\n  \r\n  <script src=\"app.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\napp.js\r\n\r\n``` js\r\n(function() {\r\n  'use strict';\r\n\r\n  window.MainCtrl = function ($scope, $http) {\r\n    $scope.search = function(query) {\r\n      $http.jsonp('http://search.twitter.com/search.json?q=' + \r\n        query + '&callback=JSON_CALLBACK')\r\n      .success(function(data) {\r\n        $scope.items = data.results;\r\n      });\r\n    };\r\n  };  \r\n})();\r\n```\r\n\r\n## Exercise 6 - Place the controller into an angularjs module.\r\n\r\nNow you might be thinking, ok this is a great demo, but creating global functions is not a best practice and certainly can create some potential issues.  And your right, we have been using the global to not throw too much at you at once and hopefully help you get an idea of what is going on behind the scenes on how the views connect to controllers and models.\r\n\r\nBut lets put our controller code in an angularjs module, and define that module as our application.  First, we need to create the module and it is very easy: (replace your app.js with the following:)\r\n\r\n``` js  \r\nangular.module('Twitter', [])\r\n  .controller('MainCtrl', function($scope, $http) {\r\n    $scope.search = function(query) {\r\n      $http.jsonp('http://search.twitter.com/search.json?q=' + query + '&callback=JSON_CALLBACK')\r\n        .success(function(data) {\r\n          $scope.items = data.results;\r\n        });\r\n    };      \r\n});\r\n```\r\n\r\nYou can see we are calling the module method from the angular object and passing the name of our application and an empty array, which will address later.  This method returns a module instance, this instance has a controller method that allows us to define the controller.  We are using chaining to call the controller method.\r\n\r\nThen we simply call the controller the same name as our declaration and add our function to the angular module.\r\n\r\nGreat!\r\n\r\nNow, we need to go to the html index.html file and assign our newly created module to our `ng-app` directive.  Like so:\r\n\r\n``` html\r\n<html ng-app=\"Twitter\">\r\n```\r\n\r\nAwesome!  We have just removed all the ugly global function stuff, and your code is now safely wrapped in an angular module.\r\n\r\nGREAT JOB!\r\n\r\nHere is the final results:\r\n\r\nindex.html\r\n\r\n``` html\r\n<!doctype html>\r\n<html ng-app='Twitter'>\r\n<head>\r\n  <title>Twitter Search</title>\r\n  <link rel=\"stylesheet\" href=\"/components/bootstrap/css/bootstrap.css\">\r\n</head>\r\n<body>\r\n  <div class=\"container\" ng-controller=\"MainCtrl\">\r\n    <h1>Twitter Search</h1>\r\n    <input type=\"text\" ng-model=\"query\">\r\n    <button class=\"btn\" ng-click=\"search(query)\">search</button>\r\n    <h3>Results for: {{query}}</h3>\r\n    <ul>\r\n      <li ng-repeat=\"item in items\">\r\n        {{item.text}}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <script src=\"/components/jquery/jquery.js\"></script>\r\n  <script src=\"/components/angular/angular.js\"></script>\r\n  <script src=\"/components/angular-resource/angular-resource.js\"></script>\r\n  <script src=\"/app.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\napp.js\r\n\r\n``` js\r\nangular.module('Twitter', [])\r\n  .controller('MainCtrl', function($scope, $http) {\r\n    $scope.search = function(query) {\r\n      $http.jsonp('http://search.twitter.com/search.json?q=' + query + '&callback=JSON_CALLBACK')\r\n        .success(function(data) {\r\n          $scope.items = data.results;\r\n        });\r\n    };      \r\n});\r\n``` \r\n\r\n\r\n<a name=\"jshint\"></a>\r\n\r\n# Using jsHint\r\n\r\njsHint is a linting tool that will scan your javascript file and let you know if you have any syntax errors.\r\n\r\n## install\r\n\r\n``` sh\r\nnpm install jshint -g\r\n```\r\n\r\n## run\r\n\r\n``` sh\r\njshint [your js file]\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}